#version 450


layout(set = 1, binding = 0) uniform UniformBufferObject {
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
    mat4 inverseProjectionMatrix;
    int sphereCount;
};

struct Sphere {
    vec3 center;
    vec3 color;
    float radius;
};

layout(set=1, binding = 1) readonly buffer SpheresSSBOIn {
   Sphere spheresIn[ ];
};

layout(set=1, binding = 2) buffer SpheresSSBOOut {
   Sphere spheresOut[ ];
};

layout(set=0, binding = 0, rgba32f) writeonly uniform image2D imgOutput;

struct Ray {
    vec3 origin;
    vec3 direction;
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;


float intersectSphere(Ray ray, Sphere sphere, out float t) {
    vec3 oc = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;
    if (discriminant < 0.0) {
        return 0;
    } else {
        float t0 = (-b - sqrt(discriminant)) / (2.0 * a);
        float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
        t = (t0 < t1 && t0 > 0.0) ? t0 : t1;
        return t;
    }
}

void main() {
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 resolution = vec2(imageSize(imgOutput));


    Ray ray;
    vec2 uv = (pixelCoord / resolution) * 2.0 - 1.0;
    vec4 clipSpacePos = vec4(uv, -1.0, 1.0);
    vec4 viewSpacePos = inverseProjectionMatrix * clipSpacePos;
    viewSpacePos /= viewSpacePos.w;
    vec4 worldSpacePos = inverseViewMatrix * viewSpacePos;

    ray.origin = vec3(inverseViewMatrix[3]);
    ray.direction = normalize(worldSpacePos.xyz - ray.origin);



    vec4 color = vec4(0.0);

    float t;
    float closestSphere = 1000000000.0;
    for (int i = 0; i < sphereCount; i++) {
        float hit = intersectSphere(ray, spheresIn[i], t);
        if (hit < closestSphere && hit > 0.0) {
            color = vec4(spheresIn[i].color, 1.0); 
            closestSphere = hit;
        }
    }


    imageStore(imgOutput, pixelCoord, color);
}